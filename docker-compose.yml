services:
  web:
    build:
      context: .
    ports:
      - "${EXPOSE_PORT}:${EXPOSE_PORT}"  # Bind EXPOSE_PORT from .env
    depends_on:
      - rabbitmq
      - redis
      - mongo
      - postgres
    env_file:
      - .env  # Load environment variables from the .env file
    volumes:
      - ./logs:/app/logs  # Map logs to host directory

  worker:
    build:
      context: .
    command: celery -A app.tasks.celery_tasks.celery_app worker -l info -Q scrape_queue
    depends_on:
      - web
      - rabbitmq
      - redis
      - mongo
      - postgres
    env_file:
      - .env  # Share the same environment variables as the web service

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq_local
    ports:
      - "${RABBITMQ_PORT}:5672"    # RabbitMQ messaging port
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"  # RabbitMQ Management UI port
    # environment:
      # Uncomment the following to use secrets in production
      # RABBITMQ_DEFAULT_USER_FILE: /run/secrets/rabbitmq_user
      # RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_pass

  redis:
    image: redis:latest
    container_name: redis_local
    ports:
      - "${REDIS_PORT}:6379"  # Map Redis port to localhost
    command: ["redis-server", "--appendonly", "yes"]  # Enable persistence

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander_local
    hostname: redis_commander
    restart: always
    depends_on:
      - redis
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"  # Map Redis Commander port
    environment:
      - REDIS_HOSTS=local:redis:6379  # Connect to Redis container

  mongo: # MongoDB service
    image: mongo:latest # Use a specific version for better control
    container_name: mongo_local
    env_file:
      - .env # Load environment variables from the .env file
    ports:
      - "${MONGO_PORT}:27017" # Expose MongoDB port
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME} # Root user for initial setup
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD} # Root user password
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME} # Database to create on startup
    volumes:
      - ./mongodata:/data/db # Persist MongoDB data

  postgres:
    image: postgres:latest # Use a specific version for better control
    container_name: postgres_local
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME} # Default Postgres user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Default Postgres password
      POSTGRES_DB: ${POSTGRES_DB_NAME} # Default Postgres database
    volumes:
      - ./pgdata:/var/lib/postgresql/data # Persist Postgres data

volumes:
  logs:
    driver: local  # Use local driver for named volume
  pgdata:
    driver: local # Use local driver for named volume
  mongodata:
    driver: local # Use local driver for named volume

# Uncomment to use secrets in production
# secrets:
#   rabbitmq_user:
#     file: ./secrets/rabbitmq_user
#   rabbitmq_pass:
#     file: ./secrets/rabbitmq_pass
